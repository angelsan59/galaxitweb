<?php

namespace San\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
      public function getUsers($page, $nbPerPage)
  {
     $query = $this->createQueryBuilder('a')
      ->orderBy('a.dateMod', 'DESC')
      ->getQuery()
     ;

     $query
      // On définit l'annonce à partir de laquelle commencer la liste
      ->setFirstResult(($page-1) * $nbPerPage)
      // Ainsi que le nombre d'annonce à afficher sur une page
      ->setMaxResults($nbPerPage)
    ;

    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
    // (n'oubliez pas le use correspondant en début de fichier)
    return new Paginator($query, false);
  }
  
  public function getProfil()
  {
     $query = $this->createQueryBuilder('a') 
       ->leftJoin('a.candidatures', 'c')
      ->addSelect('c')       
      ->orderBy('a.dateMod', 'DESC')
      ->setMaxResults(10)
      ->getQuery()
    ;
return $query
    
    ->getResult()
  ;
  }
  
  public function getAbonnes($page, $nbPerPage)
  {
     $query = $this->createQueryBuilder('a')
             ->where('a.abonewsletter = 1')
           
      ->orderBy('a.nom')
      ->getQuery()
     ;

     $query
      // On définit l'annonce à partir de laquelle commencer la liste
      ->setFirstResult(($page-1) * $nbPerPage)
      // Ainsi que le nombre d'annonce à afficher sur une page
      ->setMaxResults($nbPerPage)
    ;

    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
    // (n'oubliez pas le use correspondant en début de fichier)
    return new Paginator($query, true);
  }
}
